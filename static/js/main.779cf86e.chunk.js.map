{"version":3,"sources":["time.js","ClockWrapper/selectors.js","constants.js","utils.js","Clock/selectors.js","Clock/index.js","Clock/constants.js","ClockWrapper/index.js","App.jsx","reportWebVitals.js","index.js"],"names":["Time","number","base","numberOfBases","Math","floor","adjustedNumber","hour","hours","minsInDec","mins","seconds","round","timeString","splitOnColon","split","AMPM","Number","length","constructor","inputTime","toHours","this","getHours","getMinutes","getSeconds","toTimeString","substring","toString","toTwentyFourHourTime","parse","now","Date","convertHour","addSeconds","adjustedSecs","adjustBase","newSeconds","newMins","newHours","adjusted","addMinutes","minutes","additionalHours","additionalMins","convertTimeToFullDate","today","dateString","getFullYear","getMonth","getDate","getSlope","x1","x2","convertTime","normalTime","sunriseHour","sunsetHour","daySlope","dayIntercept","nightIntercept","nightSlope","newTime","getTimeInHourDec","time","adjustTime","slope","xValues","yValues","push","intercept","adjustedTime","isTomorrow","DAY_ARC","index","NIGHT_ARC","FULL_CIRCLE","degreesToRadians","degrees","PI","isDay","degree","cos","getMarkerColor","dayColors","radians","abs","getMarkerIndex","convertDateToDegrees","date","UTC","getDaysIntoYear","convertEventToDate","eventData","year","month","day","getRadialAxisMarkers","dayRadius","equinox","solstices","todayInDegrees","h","factor","map","radius","getRadiusFromDegrees","name","phenom","sort","a","b","Clock","_ref","_radialAxisTicks","y","currentTime","height","width","seasons","yValue","dayDegrees","filter","changeInDay","nightDegrees","indexOf","thetaFactor","nightRadius","useMemo","seasonData","radialAxisTicks","React","createElement","Plot","data","r","_","theta","type","mode","line","color","hovertext","hoverinfo","fill","fillcolor","marker","size","layout","modebar","remove","annotations","text","font","showarrow","showlegend","paper_bgcolor","polar","window","innerWidth","bgcolor","radialaxis","range","showgrid","showline","showticklabels","tickmode","tickvals","ele","ticks","ticktext","tickcolor","gridcolor","layer","tickangle","tickfont","angularaxis","direction","gridwidth","linecolor","period","rotation","ClockWrapper","setRequesting","location","initState","dayBounds","setDayBounds","useState","sunrise","sunset","conversionFactors","setConversionFactors","setConvertedTime","setSeasons","useEffect","fetch","then","response","json","lat","lng","results","catch","console","log","previousHours","intervalId","setInterval","clearInterval","x","process","App","windowSize","setWindowSize","getWindowSize","setLatLng","requesting","handleWindowResize","addEventListener","removeEventListener","navigator","geolocation","watchPosition","pos","crd","coords","latitude","longitude","err","error","code","message","enableHighAccuracy","maximumAge","className","style","innerHeight","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.779cf86e.chunk.js","sourcesContent":["class Time {\n    static adjustBase (number, base) {\n        const numberOfBases = Math.floor(number / base);\n        const adjustedNumber = number % base;\n        return {\n            numberOfBases,\n            adjustedNumber,\n        };\n    }\n\n    static convertHour(hour) {\n        const hours = Math.floor(hour);\n        const minsInDec = (hour - hours) * 60;\n        const mins = Math.floor(minsInDec);\n        const seconds = Math.round((minsInDec - mins) * 60);\n        return {\n            hours,\n            mins,\n            seconds,\n        };\n    }\n\n    static parse (timeString) {\n        const splitOnColon = timeString.split(\":\");\n        let hours = Number(splitOnColon[0]);\n        let mins;\n        let seconds = 0;\n        let AMPM;\n        if (splitOnColon.length === 3) {\n            mins = Number(splitOnColon[1]);\n            seconds = Number(splitOnColon[2].split(\" \")[0]);\n            AMPM = splitOnColon[2].split(\" \")[1];\n        } else {\n            mins = Number(splitOnColon[1].split(\" \")[0]);\n            AMPM = splitOnColon[1].split(\" \")[1];\n        }\n        if (AMPM === \"PM\") {\n            hours = hours + 12;\n        }\n        return {\n            hours,\n            mins,\n            seconds,\n        };\n    }\n\n    constructor (inputTime) {\n        let hours;\n        let mins;\n        let seconds;\n        if (typeof inputTime === \"string\") {\n            ({ hours, mins, seconds } = Time.parse(inputTime));\n        } else if (typeof inputTime === \"number\") {\n            ({ hours, mins, seconds } = Time.convertHour(inputTime));\n        } else {\n            const now = new Date();\n            const hours = now.getHours();\n            const mins = now.getMinutes();\n            const seconds = now.getSeconds();\n            return {\n                hours,\n                mins,\n                seconds,\n            };\n        }\n\n        this.hours = hours;\n        this.mins = mins;\n        this.seconds = seconds;\n    }\n\n    addSeconds (seconds) {\n        const adjustedSecs = Time.adjustBase(seconds, 60);\n        let newSeconds = this.seconds + adjustedSecs.adjustedNumber;\n        let newMins = this.mins + adjustedSecs.numberOfBases;\n        let newHours = this.hours;\n        if (newSeconds >= 60) {\n            const adjusted = Time.adjustBase(newSeconds, 60);\n            newSeconds = adjusted.adjustedNumber;\n            newMins = newMins + adjusted.numberOfBases;\n        }\n        if (newMins >= 60) {\n            const adjusted = Time.adjustBase(newMins, 60);\n            newMins = adjusted.adjustedNumber;\n            newHours = newHours + adjusted.numberOfBases;\n        }\n        if (newHours > 24) {\n            const adjusted = Time.adjustBase(newHours, 24);\n            newHours = adjusted.adjustedNumber;\n        }\n        this.hours = newHours;\n        this.mins = newMins;\n        this.seconds = newSeconds;\n    }\n\n    addMinutes (minutes) {\n        const additionalHours = Math.floor(minutes / 60);\n        const additionalMins = minutes % 60;\n        let newHours = this.hours + additionalHours;\n        let newMins = this.mins + additionalMins;\n        if (newMins >= 60) {\n            const adjusted = Time.adjustBase(newMins, 60);\n            newMins = adjusted.adjustedNumber;\n            newHours = newHours + adjusted.numberOfBases;\n        }\n        if (newHours > 24) {\n            const adjusted = Time.adjustBase(newHours, 24);\n            newHours = adjusted.adjustedNumber;\n        }\n        this.hours = newHours;\n        this.mins = newMins;\n    }\n\n    getHours () {\n        return this.hours;\n    }\n\n    getMinutes () {\n        return this.mins;\n    }\n\n    getSeconds () {\n        return this.seconds;\n    }\n\n    toHours = () => {\n        const hour = this.getHours();\n        let mins = this.getMinutes();\n        const seconds = this.getSeconds();\n        mins = mins + seconds / 60;\n        return hour + mins / 60;\n    };\n\n    toTimeString = () => {\n        const hours = this.hours;\n        const mins = \"00\".substring(0, 2 - this.mins.toString().length) + this.mins;\n        const seconds = \"00\".substring(0, 2 - this.seconds.toString().length) + this.seconds;\n        if (hours > 12) {\n            return `${hours - 12}:${mins}:${seconds} PM`;\n        } else {\n            return `${hours}:${mins}:${seconds} AM`;\n        }\n    };\n\n    toTwentyFourHourTime = () => {\n        const hours = this.hours;\n        const mins = \"00\".substring(0, 2 - this.mins.toString().length) + this.mins;\n        const seconds = \"00\".substring(0, 2 - this.seconds.toString().length) + this.seconds;\n        return `${hours}:${mins}:${seconds}`;\n    };\n}\n\nexport default Time;\n","import Time from \"../time\";\n\nexport const convertTimeToFullDate = (timeString) => {\n    const today = new Date();\n    const dateString = `${today.getFullYear()}/${\n        today.getMonth() + 1\n    }/${today.getDate()} ${timeString} UTC`;\n    return new Date(Date.parse(dateString));\n};\n\nconst getSlope = (x1, x2) => {\n    return 12.0 / (x2 - x1);\n};\n\nconst convertTime = (\n    normalTime,\n    sunriseHour,\n    sunsetHour,\n    daySlope,\n    dayIntercept,\n    nightIntercept,\n    nightSlope,\n) => {\n    let newTime;\n    if (normalTime > sunsetHour) {\n        newTime = nightSlope * normalTime + nightIntercept - 24;\n    } else if (normalTime < sunriseHour) {\n        newTime = nightSlope * normalTime;\n    } else {\n        newTime = daySlope * normalTime + dayIntercept;\n    }\n    return newTime;\n};\n\nexport const getConvertedTime = (\n    slope, intercept, dayBounds,\n) => {\n    const now = getTimeInHourDec(new Date());\n    let newTime;\n    if (now > dayBounds.sunset) {\n        newTime = slope * now + intercept - 24;\n    } else {\n        newTime = slope * now + intercept;\n    }\n    return newTime;\n};\n\nexport const getTimeInHourDec = (time) => {\n    const hour = time.getHours();\n    let mins = time.getMinutes();\n    const seconds = time.getSeconds();\n    mins = mins + seconds / 60;\n    return hour + mins / 60;\n};\n\nexport const adjustTime = (sunriseHour, sunsetHour) => {\n    const sixPM = 18.0;\n    const now = getTimeInHourDec(new Date());\n    let slope;\n    const xValues = [];\n    const yValues = [];\n\n    const adjustedSunrise = 24.0 + sunriseHour;\n    const adjustedSixPM = 24.0 + sixPM;\n    const nightSlope = getSlope(sunsetHour, adjustedSunrise);\n    const nightIntercept = adjustedSixPM - nightSlope * sunsetHour;\n    const daySlope = getSlope(sunriseHour, sunsetHour);\n    const dayIntercept = sixPM - daySlope * sunsetHour;\n    for (let normalTime = 0; normalTime <= 24.0; normalTime++) {\n        xValues.push(normalTime);\n        const newTime = convertTime(\n            normalTime,\n            sunriseHour,\n            sunsetHour,\n            daySlope,\n            dayIntercept,\n            nightIntercept,\n            nightSlope,\n        );\n        yValues.push(newTime);\n    }\n    const newTime = convertTime(\n        now,\n        sunriseHour,\n        sunsetHour,\n        daySlope,\n        dayIntercept,\n        nightIntercept,\n        nightSlope,\n    );\n    let intercept;\n    if (now >= sunriseHour && now <= sunsetHour) {\n        slope = daySlope;\n        intercept = dayIntercept;\n    } else if (now < sunriseHour) {\n        slope = nightSlope;\n        intercept = 0;\n    } else {\n        slope = nightSlope;\n        intercept = nightIntercept;\n    }\n    return {\n        adjustedTime: new Time(newTime).toTimeString(),\n        slope,\n        intercept,\n        isTomorrow: newTime > 24,\n        yValues,\n        xValues,\n    };\n};\n","const DAY_ARC = [];\nfor (let index = 90; index <= 270; index++) {\n    DAY_ARC.push(index);\n}\nconst NIGHT_ARC = [];\nfor (let index = -90; index <= 90; index++) {\n    NIGHT_ARC.push(index);\n}\n\nconst FULL_CIRCLE = [];\nfor (let index = 0; index <= 360; index++) {\n    FULL_CIRCLE.push(index);\n}\nconst EQUINOX_RADIUS = 30;\nconst BACKGROUND_COLOR = \"#282c34\";\n\nexport { BACKGROUND_COLOR, DAY_ARC, NIGHT_ARC, EQUINOX_RADIUS, FULL_CIRCLE };\n","export const degreesToRadians = (degrees) => degrees * Math.PI / 180;\n","import { degreesToRadians } from \"../utils\";\n\nexport const isDay = (degree) => {\n    return Math.cos(degreesToRadians(degree)) <= 0;\n};\n\nexport const getMarkerIndex = (degree) => {\n    const radians = degreesToRadians(degree);\n    const index = Math.abs(-4 * Math.cos(radians));\n    return Math.floor(index);\n};\n\nexport const getMarkerColor = (degree) => {\n    const dayColors = [\"#ae4612\", \"#bb3e03\", \"#ca6702\", \"#EE9B00\", \"#E9D8A6\"];\n    const nightColors = [\"#94d2bd\", \"#0a9396\", \"#0a6a96\", \"#023e4b\", \"#001219\"];\n    const index = getMarkerIndex(degree);\n    if (isDay(degree)) {\n        return dayColors[index];\n    }\n    return nightColors[index];\n};\n\nfunction getDaysIntoYear(date) {\n    return (\n        (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) -\n            Date.UTC(date.getFullYear(), 0, 0)) /\n        24 /\n        60 /\n        60 /\n        1000\n    );\n}\n\nconst convertDateToDegrees = (dateString) => {\n    const date = new Date(dateString);\n    const daysIntoYears = getDaysIntoYear(date);\n    return (daysIntoYears / 365.25) * 360;\n};\n\nconst getRadiusFromDegrees = (factor, h, degrees) => {\n    return factor * Math.cos(degreesToRadians(degrees - h)) + 30;\n};\n\nexport const convertEventToDate = (eventData) => {\n    return ` ${eventData.year}, ${eventData.month}, ${eventData.day}`;\n};\n\nexport const getRadialAxisMarkers = (dayRadius, equinox, solstices) => {\n    if (!solstices.length || !equinox) {\n        return [];\n    }\n    const todayInDegrees = convertDateToDegrees(new Date());\n    const equinoxDayInDegrees = convertDateToDegrees(equinox);\n    const h = equinoxDayInDegrees - 270;\n\n    const nowUnscaled = Math.cos(degreesToRadians(todayInDegrees - h));\n    const factor = (dayRadius - 30) / nowUnscaled;\n\n    const radii = solstices.map(convertEventToDate).map((dateString, index) => {\n        const radius = getRadiusFromDegrees(\n            factor,\n            h,\n            convertDateToDegrees(dateString)\n        );\n        const name = solstices[index].phenom;\n        return {\n            radius,\n            name,\n        };\n    });\n    return [...radii.sort((a, b) => a.radius - b.radius)];\n};\n","/* eslint-disable react/prop-types */\nimport React, { useMemo } from \"react\";\nimport Plot from \"react-plotly.js\";\n\nimport {\n    BACKGROUND_COLOR,\n    DAY_ARC,\n    NIGHT_ARC,\n    EQUINOX_RADIUS,\n    FULL_CIRCLE,\n} from \"../constants\";\nimport {\n    convertEventToDate,\n    getRadialAxisMarkers,\n    isDay,\n    getMarkerColor,\n} from \"./selectors\";\nimport {\n    GRID_COLOR,\n    EQUILUX_COLOR,\n    NIGHT_COLOR,\n    DAY_COLOR,\n    TICK_FONT_COLOR,\n} from \"./constants\";\n\nfunction Clock({ y, currentTime, height, width, time, seasons }) {\n    const degrees = y.map((yValue) => (yValue / 24.0) * 360);\n    const dayDegrees = degrees.filter(isDay);\n    const changeInDay = dayDegrees[1] - dayDegrees[0];\n    const nightDegrees = degrees.filter(\n        (degree) => dayDegrees.indexOf(degree) === -1\n    );\n    const changeInNight = nightDegrees[1] - nightDegrees[0];\n    const thetaFactor = changeInNight / changeInDay;\n    const dayRadius =\n        EQUINOX_RADIUS -\n        (EQUINOX_RADIUS * (1 - thetaFactor)) / (thetaFactor + 1);\n    const nightRadius =\n        EQUINOX_RADIUS +\n        (EQUINOX_RADIUS * (1 - thetaFactor)) / (thetaFactor + 1);\n\n    const equinox = useMemo(() => {\n        if (!seasons.length) {\n            return null;\n        }\n        return convertEventToDate(\n            seasons.filter((seasonData) => seasonData.phenom === \"Equinox\")[1]\n        );\n    }, [seasons]);\n    const solstices = useMemo(() => {\n        if (!seasons.length) {\n            return [];\n        }\n        return seasons.filter((seasonData) => seasonData.phenom === \"Solstice\");\n    }, [seasons]);\n    const radialAxisTicks = useMemo(() => {\n        if (!equinox || !solstices.length) {\n            return [];\n        }\n        return getRadialAxisMarkers(dayRadius, equinox, solstices);\n    }, [dayRadius, equinox, solstices]);\n    return (\n        radialAxisTicks.length && (\n            <div>\n                <Plot\n                    data={[\n                        {\n                            r: NIGHT_ARC.map((_) => EQUINOX_RADIUS),\n                            theta: NIGHT_ARC,\n                            type: \"scatterpolar\",\n                            mode: \"line\",\n                            line: { color: EQUILUX_COLOR, width: 1 },\n                            name: \"EquiLux circle\",\n                            hovertext: \"EquiLux circle\",\n                            hoverinfo: \"name\",\n                        },\n                        {\n                            r: NIGHT_ARC.map((_) => nightRadius),\n                            theta: NIGHT_ARC,\n                            type: \"scatterpolar\",\n                            mode: \"line\",\n                            fill: \"tonext\",\n                            line: { color: NIGHT_COLOR, width: 4 },\n                            name: \"Dark time\",\n                            hoverinfo: \"name\",\n                        },\n\n                        {\n                            r: DAY_ARC.map((_) => EQUINOX_RADIUS),\n                            theta: DAY_ARC,\n                            type: \"scatterpolar\",\n                            mode: \"line\",\n                            line: { color: EQUILUX_COLOR, width: 1 },\n                            name: \"EquiLux circle\",\n                            hoverinfo: \"name\",\n                        },\n                        {\n                            r: DAY_ARC.map((_) => dayRadius),\n                            theta: DAY_ARC,\n                            type: \"scatterpolar\",\n                            mode: \"line\",\n                            fill: \"tonext\",\n                            line: { color: DAY_COLOR, width: 4 },\n                            name: \"Light time\",\n                            hoverinfo: \"name\",\n                        },\n                        {\n                            r: FULL_CIRCLE.map((_) => 10),\n                            theta: FULL_CIRCLE,\n                            type: \"scatterpolar\",\n                            mode: \"line\",\n                            fill: \"toself\",\n                            fillcolor: getMarkerColor(\n                                (currentTime.y / 24.0) * 360\n                            ),\n                            line: {\n                                color: getMarkerColor(\n                                    (currentTime.y / 24.0) * 360\n                                ),\n                            },\n                            hoverinfo: \"skip\",\n                        },\n                        {\n                            r: [\n                                0,\n                                isDay((currentTime.y / 24.0) * 360)\n                                    ? dayRadius\n                                    : nightRadius,\n                            ],\n                            theta: [0, (currentTime.y / 24.0) * 360],\n                            type: \"scatterpolar\",\n                            mode: \"marker\",\n                            marker: {\n                                color: getMarkerColor(\n                                    (currentTime.y / 24.0) * 360\n                                ),\n                                size: 8,\n                            },\n                            line: { width: 4 },\n                            hoverinfo: \"skip\",\n                        },\n                    ]}\n                    layout={{\n                        modebar: {\n                            remove: [\"lasso\", \"zoom\", \"select\"],\n                        },\n                        annotations: [\n                            {\n                                text: time,\n                                font: {\n                                    color: \"white\",\n                                },\n                                showarrow: false,\n                            },\n                        ],\n                        showlegend: false,\n                        width,\n                        height,\n                        paper_bgcolor: BACKGROUND_COLOR,\n                        polar: {\n                            width: window.innerWidth,\n                            bgcolor: BACKGROUND_COLOR,\n                            radialaxis: {\n                                range: [\n                                    1,\n                                    radialAxisTicks[radialAxisTicks.length - 1]\n                                        ?.radius + 5,\n                                ],\n                                showgrid: true,\n                                showline: false,\n                                showticklabels: true,\n                                tickmode: \"array\",\n                                tickvals: radialAxisTicks.map(\n                                    (ele) => ele.radius\n                                ),\n                                ticks: \"\",\n                                ticktext: radialAxisTicks.map(\n                                    (ele) => ele.name\n                                ),\n                                tickcolor: \"#b6bac2\",\n                                gridcolor: \"#6e6e6e\",\n                                layer: \"below traces\",\n                                tickangle: 45,\n                                tickfont: {\n                                    color: TICK_FONT_COLOR,\n                                },\n                            },\n                            angularaxis: {\n                                direction: \"clockwise\",\n                                gridwidth: 0.1,\n                                linecolor: GRID_COLOR,\n                                tickcolor: GRID_COLOR,\n                                period: 8,\n                                rotation: 270,\n                                tickmode: \"array\",\n                                tickvals: [0, 45, 90, 135, 180, 225, 270, 315],\n                                ticktext: [\n                                    \"midnight\",\n                                    \"3 am\",\n                                    \"6 am\",\n                                    \"9 am\",\n                                    \"noon\",\n                                    \"3 pm\",\n                                    \"6 pm\",\n                                    \"9 pm\",\n                                ],\n                                color: TICK_FONT_COLOR,\n                                layer: \"below traces\",\n                            },\n                        },\n                    }}\n                />\n            </div>\n        )\n    );\n}\n\nexport default Clock;\n","export const NIGHT_COLOR = \"#0A9396\";\nexport const EQUILUX_COLOR = \"#93865f\";\nexport const DAY_COLOR = \"#EE9B00\";\nexport const TICK_FONT_COLOR = \"#b6bac2\";\nexport const GRID_COLOR = \"#83898b\";\n","/* eslint-disable react/prop-types */\nimport React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport {\n    adjustTime,\n    getTimeInHourDec,\n    convertTimeToFullDate,\n} from \"./selectors\";\nimport Time from \"../time\";\nimport Clock from \"../Clock\";\nimport DebuggingPlot from \"../DebugginPlot\";\n\nconst debugging = process.env.NODE_ENV !== \"production\";\n\nfunction ClockWrapper({ height, width, setRequesting, location }) {\n    const initState = { time: 0, slope: 1, intercept: 0 };\n    const [dayBounds, setDayBounds] = useState({ sunrise: 0, sunset: 0 });\n    const [conversionFactors, setConversionFactors] = useState(initState);\n    const [time, setConvertedTime] = useState(0);\n    const [seasons, setSeasons] = useState([]);\n    useEffect(() => {\n        fetch(\n            `https://aa.usno.navy.mil/api/seasons?year=${new Date().getFullYear()}`\n        )\n            .then((response) => response.json())\n            .then((data) => {\n                setSeasons(data.data);\n            });\n    }, []);\n\n    useEffect(() => {\n        if (location.lat !== 0 && location.lng !== 0) {\n            setRequesting(true);\n\n            fetch(\n                // eslint-disable-next-line comma-dangle\n                `https://api.sunrise-sunset.org/json?lat=${location.lat}&lng=${location.lng}`\n            )\n                .then(function (response) {\n                    setRequesting(false);\n                    return response.json();\n                })\n                .then((data) => {\n                    const sunrise = convertTimeToFullDate(data.results.sunrise);\n                    const sunset = convertTimeToFullDate(data.results.sunset);\n                    setDayBounds({\n                        sunrise: getTimeInHourDec(sunrise),\n                        sunset: getTimeInHourDec(sunset),\n                    });\n                })\n                .catch(console.log);\n        }\n    }, [location, setRequesting]);\n\n    useEffect(() => {\n        if (!dayBounds.sunrise) {\n            return;\n        }\n        const { adjustedTime, slope, intercept } = adjustTime(\n            dayBounds.sunrise,\n            dayBounds.sunset\n        );\n        const currentTime = new Time(adjustedTime);\n        setConversionFactors({\n            slope,\n            intercept,\n        });\n        setConvertedTime(currentTime.toTimeString());\n    }, [dayBounds]);\n\n    useEffect(() => {\n        if (!time) {\n            return;\n        }\n        const { slope } = conversionFactors;\n\n        const previousHours = new Time(time).getHours();\n        const intervalId = setInterval(() => {\n            const currentTime = new Time(time);\n            // const newTime = getConvertedTime(slope, intercept, dayBounds);\n            currentTime.addSeconds(1);\n            if (previousHours < 6.0 && currentTime.getHours() > 6.0) {\n                return setConversionFactors(initState);\n            }\n            // console.log(\"formula\", newTime, \"time by adding\", currentTime.toHours());\n            setConvertedTime(currentTime.toTimeString());\n            // setConvertedTime(new Time(newTime).toTimeString());\n        }, 1000 / slope);\n\n        return function cleanup() {\n            clearInterval(intervalId);\n        };\n    }, [time, conversionFactors]);\n\n    const { xValues, yValues } = adjustTime(\n        dayBounds.sunrise,\n        dayBounds.sunset\n    );\n    if (!location) {\n        return (\n            <div>\n                Location services need to be turned on for the clock to run\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            <Clock\n                width={width}\n                height={height}\n                y={yValues}\n                seasons={seasons}\n                time={time || \"Loading...\"}\n                currentTime={{\n                    x: getTimeInHourDec(new Date()),\n                    y: new Time(time).toHours(),\n                }}\n            />\n            {debugging && (\n                <DebuggingPlot\n                    x={xValues}\n                    y={yValues}\n                    currentTime={{\n                        x: getTimeInHourDec(new Date()),\n                        y: new Time(time).toHours(),\n                    }}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default ClockWrapper;\n","import React, { useEffect, useState } from \"react\";\nimport ClockWrapper from \"./ClockWrapper\";\n\n// eslint-disable-next-line space-before-function-paren\nexport default function App() {\n    const [windowSize, setWindowSize] = useState(getWindowSize());\n    const [location, setLatLng] = useState({ lat: 0, lng: 0 });\n    const [requesting, setRequesting] = useState(false);\n    useEffect(() => {\n        function handleWindowResize() {\n            setWindowSize(getWindowSize());\n        }\n\n        window.addEventListener(\"resize\", handleWindowResize);\n\n        return () => {\n            window.removeEventListener(\"resize\", handleWindowResize);\n        };\n    }, []);\n    const options = {\n        enableHighAccuracy: false,\n        maximumAge: 100000,\n    };\n    const success = (pos) => {\n        if (requesting) {\n            return;\n        }\n        const crd = pos.coords;\n        const minChange = 10;\n        if (\n            Math.abs(crd.latitude - location.lat) > minChange ||\n            Math.abs(crd.longitude - location.lng) > minChange\n        ) {\n            setLatLng({ lat: crd.latitude, lng: crd.longitude });\n        }\n    };\n    function error(err) {\n        console.error(`ERROR(${err.code}): ${err.message}`);\n    }\n\n    navigator.geolocation.watchPosition(success, error, options);\n    return (\n        <div\n            className=\"App\"\n            style={{\n                width: windowSize.innerWidth,\n                height: windowSize.innerHeight,\n            }}\n        >\n            <ClockWrapper\n                width={windowSize.innerWidth}\n                height={windowSize.innerHeight}\n                location={location}\n                setRequesting={setRequesting}\n            />\n        </div>\n    );\n}\n\nfunction getWindowSize() {\n    const { innerWidth, innerHeight } = window;\n    return { innerWidth, innerHeight };\n}\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}